src/
    |_index.js


COMPONENTES : 

1- Todos los componentes son funciones
2- Todos los componentes arracan en mayuscula
3- Todos los componentes tienen que retornar un elemento
4- Todos los componentes pueden recibir N cantidad props de cualquier valor
5- Todos los componentes pueden tener estado y ciclo de vida
6- No tienen ciclo de vida real sino que son funciones que se vuelven a ejecutar por completo si :
    - se modifica el estado
    - se reciben nuevas props
    - reinicia su padre
    - se modifica el contexto


CLASS : props + state + lifecycle
HOOK : Gancho - Son funciones que adaptan un componente funcional a que tenga funcionalidades que antes no tenia

- useState
- useEffect


STATE : Son variables que viven adentro de un componente que cuando se modifican React lo vuelve a renderizar


function App () {
    const 
}




class App {


    constructor(){}

    render(){}

    componentDidMount(){}

    componentDidUpdate(){}

    shouldComponentUpdate(){}

    componentWillUnmount(){}

}





JSX : JS and XML

function Componente(){}

const Componente = () => {}

class Componente {}



Componente()   =  <Componente id=""/>
Componente()   =  <Componente> </Componente>




.  = La misma carpeta donde estas parado vos archivo
.. = Subi una carpeta desde donde estas parado vos archivo





/src
    |_index.js
        |_componentes/
            |_App.js
                |_Header.js
                    |_NavBar.js
                        |_CarWidget.js
                |_ItemListContainer.js


BEM 


function foo(saludo){
    console.log(saludo)
}

foo("Hola",1,2,3)



function Foo(){
}


<Foo nombre="horacio" />

PROPS : Son las propiedades que le pasamos a un componente como los parametros de una funcion en JS vanilla. Son de SOLO LECTURA.

function foo(){
    let a = 1
    console.log(a)
}

foo()
foo()

PROMESAS:

$.ajax().then().catch()

fetch().then().catch()

otraFuncionRandom().then().catch()

leerElCache().then().catch()

AJAX: Async Javascript and XML. (XHR y Fetch son Ajax)

XHR (XMLHttpRequest) : XMLHttpRequest es una clave de objeto que nos permite hacer peticiones a un servidor usando el protocolo HTTP.

CALLBACK OF HELL : Pyramid of doom :
**funcion de ejemplo**
const usuarios = hacerPedido((usuarios)=>{
    const posteos = hacerPedido((posteos)=>{
        const comentarios = hacerPedido((comentarios)=>{
            console.log(usuarios,posteos,comentarios)
        })
    })
})

$.ajax() : Es la implementacion de jquery para XHR

FETCH : Es la nueva implementacion de XHR + Promise

FTP / TCP - IP / HTTPS / SSH / SMTP / POP / IMAP
HTTP : HyperText Transfer Protocol


CLIENTE / REQUEST

IP / URL - METODO / VERBO (get - post - put - patch - delete, etc...)
HEADER

    Accept : un header que te sirve para configurar el tipo de contenido que quieres que te devuelva el servidor.

BODY / PAYLOAD : Es el cuerpo de la peticion que se envia al servidor


SERVIDOR / RESPONSE

CODIGO - MENSAJE
1xx : Informacion

2XX : Exito

3XX : Redireccion
302 - 304

4xx : error del CLIENTE
404 - 400 - 403 - 401 - 405

5xx : error servidor

BODY

