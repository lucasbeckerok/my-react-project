src/
    |_index.js


COMPONENTES : 

1- Todos los componentes son funciones
2- Todos los componentes arracan en mayuscula
3- Todos los componentes tienen que retornar un elemento
4- Todos los componentes pueden recibir N cantidad props de cualquier valor
5- Todos los componentes pueden tener estado y ciclo de vida
6- No tienen ciclo de vida real sino que son funciones que se vuelven a ejecutar por completo si :
    - se modifica el estado
    - se reciben nuevas props
    - reinicia su padre
    - se modifica el contexto


CLASS : props + state + lifecycle
HOOK : Gancho - Son funciones que adaptan un componente funcional a que tenga funcionalidades que antes no tenia

- useState
- useEffect


STATE : Son variables que viven adentro de un componente que cuando se modifican React lo vuelve a renderizar


function App () {
    const 
}




class App {


    constructor(){}

    render(){}

    componentDidMount(){}

    componentDidUpdate(){}

    shouldComponentUpdate(){}

    componentWillUnmount(){}

}





JSX : JS and XML

function Componente(){}

const Componente = () => {}

class Componente {}



Componente()   =  <Componente id=""/>
Componente()   =  <Componente> </Componente>




.  = La misma carpeta donde estas parado vos archivo
.. = Subi una carpeta desde donde estas parado vos archivo





/src
    |_index.js
        |_componentes/
            |_App.js
                |_Header.js
                    |_NavBar.js
                        |_CarWidget.js
                |_ItemListContainer.js


BEM 


function foo(saludo){
    console.log(saludo)
}

foo("Hola",1,2,3)



function Foo(){
}


<Foo nombre="horacio" />

PROPS : Son las propiedades que le pasamos a un componente como los parametros de una funcion en JS vanilla. Son de SOLO LECTURA.

function foo(){
    let a = 1
    console.log(a)
}

foo()
foo()


$.ajax().then().catch()

fetch().then().catch()

otraFuncionRandom().then().catch()

leerElCache().then().catch()